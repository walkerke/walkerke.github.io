{
  "hash": "297a4cb315a7ce3d8cece33a287316e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"National mapping for small areas: visualizing 85,000+ Census tracts with mapgl\"\nauthor: \"Kyle Walker\"\ndate: \"2025-02-28\"\ncategories: [r, gis, census, mapping]\nembed-resources: false\nimage: images/clipboard-4244304761.png\nfilters: \n  - lightbox\nlightbox: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\nThis February, [I gave a series of workshops on Census data and R with\nthe University of Michigan's Social Science Data Analysis Network\n(SSDAN)](https://ssdan.net/events/the-2025-ssdan-webinar-series-2023-acs-data-with-r-mapping-tools-and-the-2020-census/).\nOne of my favorite examples walked participants through how to map all\n85,000+ Census tracts across the United States using the mapgl R package\nand MapLibre. Small-area national maps for topics like Census or\nelection results can be quite powerful but can be tricky to get right\neven with the capability of modern web browsers. In this post, I'll walk\nyou through how to create these visualizations effectively while\naddressing some key technical challenges.\n\n## Getting national tract data with tidycensus\n\nLet's start by loading the required libraries and getting our income\ndata for all US Census tracts. For this example, we'll map median\nhousehold income (variable `B19013_001`) from the American Community\nSurvey, with data acquired with the tidycensus R package. If you don't\nhave the shapefiles previously cached, this operation may take a few\nminutes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(mapgl)\noptions(tigris_use_cache = TRUE)\n\nus_income <- get_acs(\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  state = c(state.abb, \"DC\", \"PR\"),\n  year = 2023,\n  geometry = TRUE,\n  resolution = \"5m\"\n)\n\nus_income\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 85381 features and 5 fields (with 336 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1467 ymin: 17.88328 xmax: 179.7785 ymax: 71.38782\nGeodetic CRS:  NAD83\n# A tibble: 85,381 × 6\n   GEOID       NAME            variable estimate   moe                  geometry\n   <chr>       <chr>           <chr>       <dbl> <dbl>        <MULTIPOLYGON [°]>\n 1 01089003100 Census Tract 3… B19013_…    89297 16748 (((-86.59811 34.74094, -…\n 2 01089000501 Census Tract 5… B19013_…    46643 13010 (((-86.65703 34.77881, -…\n 3 01089011021 Census Tract 1… B19013_…    82528 38647 (((-86.78678 34.67045, -…\n 4 01095031200 Census Tract 3… B19013_…    55106  9618 (((-86.17402 34.23036, -…\n 5 01073012401 Census Tract 1… B19013_…    71213 11788 (((-86.90739 33.57447, -…\n 6 01073003400 Census Tract 3… B19013_…    32125 20693 (((-86.91104 33.50274, -…\n 7 01073003001 Census Tract 3… B19013_…    56917 26119 (((-86.87246 33.51363, -…\n 8 01073010402 Census Tract 1… B19013_…    28684 26530 (((-86.99094 33.37425, -…\n 9 01073005101 Census Tract 5… B19013_…    30222  6679 (((-86.83959 33.49663, -…\n10 01073010603 Census Tract 1… B19013_…    38750  7625 (((-86.9295 33.47472, -8…\n# ℹ 85,371 more rows\n```\n\n\n:::\n:::\n\n\n\nOur dataset contains over 85,000 Census tracts, each with their\nestimated median household income. This is a substantial amount of data\nto visualize on a single map!\n\n## Creating our initial national tracts map\n\nLet's create a first map using the mapgl package with MapLibre as our\nmapping engine. It will take a few moments for MapLibre to render the\nmap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaplibre(\n  style = carto_style(\"positron\"),\n  center = c(-98.5795, 39.8283),\n  zoom = 3\n) |>\n  set_projection(\"globe\") |> \n  add_fill_layer(\n    id = \"fill-layer\",\n    source = us_income,\n    fill_color = interpolate(\n      column = \"estimate\",\n      values = c(10000, 75000, 250000),\n      stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),\n      na_color = \"lightgrey\"\n    ),\n    fill_opacity = 0.7,\n    tooltip = \"estimate\"\n  )\n```\n:::\n\n\n\n![](images/clipboard-1400961851.png)\n\nIf you look closely at the map, you'll notice something strange: there\nappear to be \"holes\" in the map, particularly in large cities where\nCensus tracts tend to be smaller. What's going on here?\n\nThe issue stems from how MapLibre (and other web mapping libraries)\nhandle geometry simplification. When we're zoomed out, the mapping\nengine uses the Douglas-Peucker simplification algorithm to reduce the\ncomplexity of geometries, making the map render faster. At zoom level 3,\nthe default tolerance value (0.375) equates to roughly 5.6 kilometers on\nthe ground.\n\nThis means that Census tracts smaller than this threshold simply\ndisappear from our map! This is particularly problematic in cities where\nCensus tracts are often quite small.\n\n## Disabling simplification to fix the holes\n\nOne solution is to disable the automatic simplification by setting the\nsimplification tolerance to 0. We can do this by adding our data as a\nsource with `add_source()` directly, using the option `tolerance = 0`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaplibre(\n  style = carto_style(\"positron\"),\n  center = c(-98.5795, 39.8283),\n  zoom = 3\n) |>\n  set_projection(\"globe\") |> \n  add_source( \n    id = \"us-tracts\",\n    data = us_income,\n    tolerance = 0\n  ) |> \n  add_fill_layer(\n    id = \"fill-layer\",\n    source = \"us-tracts\",\n    fill_color = interpolate(\n      column = \"estimate\",\n      values = c(10000, 75000, 250000),\n      stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),\n      na_color = \"lightgrey\"\n    ),\n    fill_opacity = 0.7,\n    tooltip = \"estimate\"\n  )\n```\n:::\n\n\n\n![](images/clipboard-4244304761.png)\n\nThe holes are gone, and we can now see all Census tracts, including the\ntiny ones in dense urban areas.\n\n### Understanding the trade-offs\n\nWhile disabling simplification solves our visual problem, it introduces\nsome performance challenges:\n\n1.  **Slower loading times**: The browser now has to process and render\n    all 85,000+ tract geometries at their full complexity.\n2.  **Reduced map performance**: Panning and zooming may become sluggish\n    due to the increased data load.\n3.  **Unnecessary detail**: When zoomed out, do we really need to see\n    individual tract boundaries?\n\n## A better approach: Zoom-dependent layering\n\nRather than forcing the browser to render every Census tract at all zoom\nlevels, a more sophisticated approach is to use different geographic\nlevels depending on the zoom level:\n\n-   At low zoom levels (zoomed out): Show county-level data\n-   At high zoom levels (zoomed in): Switch to tract-level data\n\nThis approach gives users a smooth experience while still providing\ndetailed data when they need it.\n\nLet's get the same income data but at the county level:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_county_income <- get_acs(\n  geography = \"county\",\n  variables = \"B19013_001\",\n  year = 2023,\n  geometry = TRUE,\n  resolution = \"5m\"\n) \n```\n:::\n\n\n\n### Implementing zoom-dependent layers\n\nNow we'll create a map that transitions between county and tract data\ndepending on the zoom level. We'll set tracts to appear when zoomed in\n(minimum zoom level of 8) and counties to disappear just before that\n(maximum zoom level of 7.99):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaplibre(\n  style = carto_style(\"positron\"),\n  center = c(-98.5795, 39.8283),\n  zoom = 3\n) |>\n  set_projection(\"globe\") |> \n  add_fill_layer(\n    id = \"fill-layer\",\n    source = us_income,\n    fill_color = interpolate(\n      column = \"estimate\",\n      values = c(10000, 75000, 250000),\n      stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),\n      na_color = \"lightgrey\"\n    ),\n    fill_opacity = 0.7,\n    min_zoom = 8,\n    tooltip = \"estimate\"\n  ) |> \n  add_fill_layer(\n    id = \"county-fill-layer\",\n    source = us_county_income,\n    fill_color = interpolate(\n      column = \"estimate\",\n      type = \"linear\",\n      values = c(10000, 75000, 250000),\n      stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),\n      na_color = \"lightgrey\"\n    ),\n    fill_opacity = 0.7,\n    max_zoom = 7.99,\n    tooltip = \"estimate\"\n  ) |>\n  add_continuous_legend(\n    \"Median household income\",\n    values = c(\"$10k\", \"$75k\", \"$250k\"),\n    colors = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\")\n  )\n```\n:::\n\n\n\n![](images/county-tract.gif)\n\nWith this approach, you'll see counties when zoomed out, which provides\na good overview of income patterns across the country. When you zoom in\npast level 8, the map automatically transitions to showing the more\ndetailed tract-level data. This gives users the best of both worlds:\ngood performance at low zoom levels and detailed data at high zoom\nlevels.\n\nI've also added a continuous legend to help users interpret the colors\non the map, which represents median household income from \\$10,000 to\n\\$250,000.\n\n## Next steps\n\nGive this approach a try with other variables from tidycensus, or your\nown national datasets! The technique works well for any scenario where\nyou need to balance performance with detail, such as election results,\ndemographic data, or economic indicators.\n\nInterested in learning more advanced mapping techniques with mapgl?\nCheck out my [mapgl workshop\nseries](https://walkerdata.gumroad.com/l/mapgl-bundle) for in-depth\ntraining on these and other visualization methods.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}