{
  "hash": "0a462f99dde43a37aba634423767132d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Time-aware isochrones for accessibility mapping with R and Mapbox tools\"\nauthor: \"Kyle Walker\"\ndate: \"2025-09-05\"\ncategories: [r, gis, mapping, navigation, accessibility]\nimage: \"comparison.png\"\nfilters:\n- lightbox\nlightbox: auto\neditor:\n   markdown:\n      wrap: 72\n---\n\n\n::: {.cell}\n\n:::\n\n\nIf you've worked with isochrones before, you know they're fantastic for\naccessibility analysis - showing you what areas can be reached from a\nlocation within a given travel time. A limitation I've run into,\nhowever, is that out-of-the-box isochrones often don't account for\ntraffic patterns. Plus, real traffic data can be difficult and expensive\nto obtain and integrate into your analysis.\n\nThe difference between mid-day and rush hour travel times can be\ndramatic, especially around major employment centers. I'll show you how\nto visualize these differences using time-aware isochrones using Mapbox\ntools in R with minimal code, then create an interactive comparison that\nmakes the impact of traffic immediately clear.\n\n## Time-aware isochrones with mapboxapi\n\nLet's start with a hospital in Dallas - UT Southwestern Medical Center -\nand see how accessibility changes throughout the day. The\n`mb_isochrone()` function in mapboxapi makes this straightforward with\nits `depart_at` parameter. You will need a Mapbox access token, set in\nyour R environment, for this to work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapgl)\nlibrary(mapboxapi)\n\n# You'll need a Mapbox access token to use this code. Get one at https://mapbox.com.\n# The `mb_access_token()` function sets the access token for all subsequent Mapbox API calls in both the mapboxapi and mapgl packages.\nmb_access_token(\"your_mapbox_access_token_here\")\n\nut_southwestern <- \"5323 Harry Hines Blvd, Dallas, TX 75390\"\n\n# First, let's geocode our location to get coordinates for a marker\nut_sf <- mb_geocode(ut_southwestern, output = \"sf\")\n\n# Generate isochrones for noon (minimal traffic)\n# mb_isochrone() geocodes address strings internally\niso_12pm <- mb_isochrone(\n  ut_southwestern,\n  depart_at = \"2025-09-11T12:00\"\n)\n\n# And for rush hour (5:30pm)\niso_530pm <- mb_isochrone(\n  ut_southwestern,\n  depart_at = \"2025-09-11T17:30\"\n)\n```\n:::\n\n\nBy specifying `depart_at` with a future timestamp (formatted as\n\\`YYYY-MM-DDTHH:MM), we're tapping into Mapbox's predicted traffic data.\nThe API will return isochrones that account for typical traffic patterns\non that day of the week and time. Notice we're using a Thursday here -\nweekday traffic patterns differ significantly from weekends.\n\n## Visualizing isochrones with mapgl\n\nNow that we have our isochrones, let's visualize them on an interactive\nmap. The mapgl package provides a clean interface to Mapbox GL JS that\nworks perfectly with sf objects from mapboxapi:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- mapboxgl(bounds = iso_12pm) |>\n  add_fill_layer(\n    \"noon\",\n    source = iso_12pm,\n    fill_color = match_expr(\n      column = \"time\",\n      values = c(5, 10, 15),\n      stops = c(\"red\", \"blue\", \"green\")\n    ),\n    fill_opacity = 0.75\n  ) |>\n  add_markers(\n    data = ut_sf\n  )\n```\n:::\n\n\n![](images/clipboard-403277541.png)\n\nThe `match_expr()` function in mapgl helps us use a Mapbox GL JS `match`\nexpression to map our data as categorical. I'm using red for the closest\n(5-minute) area, blue for 10 minutes, and green for the 15-minute\ndrive-time area.\n\nLet's create the same map for our rush hour isochrones:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2 <- mapboxgl(bounds = iso_12pm) |> \n  add_fill_layer(\n    \"rush_hour\",\n    source = iso_530pm,\n    fill_color = match_expr(\n      column = \"time\",\n      values = c(5, 10, 15),\n      stops = c(\"red\", \"blue\", \"green\")\n    ),\n    fill_opacity = 0.75\n  ) |> \n  add_markers(\n    data = ut_sf\n  )\n```\n:::\n\n\n![](images/clipboard-1229865851.png)\n\nThe mapped area at rush hour is much smaller - but it can be difficult\nto make direct visual comparisons between the two maps, especially as\nthe shapes are complex. Fortunately, the mapgl package has an\neasy-to-use solution: a comparison slider plugin.\n\n## Interactive comparison with a swiper control\n\nRather than showing two separate maps, we can use mapgl's `compare()`\nfunction to create an interactive swiper that lets users slide between\nthe noon and rush hour views:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare(map1, map2, swiper_color = \"green\") |>\n  add_legend(\n    \"Access (12pm vs. 5:30pm)\",\n    values = c(\"5 minutes\", \"10 minutes\", \"15 minutes\"),\n    colors = c(\"red\", \"blue\", \"green\"),\n    patch_shape = iso_530pm[1,],\n    type = \"categorical\",\n    style = legend_style(\n      background_opacity = 0.8\n    )\n  )\n```\n:::\n\n\n![](images/clipboard-3815909176.gif)\n\nThe result is a single interactive map where users can drag the green\nslider to reveal how dramatically the accessible area shrinks during\nrush hour. We're also using the `patch_shape` parameter in the legend -\nby passing it an actual isochrone polygon from our data, the legend\ndisplays an isochrone-shaped patch instead of the default square patch,\naligning better with our displayed isochrones.\n\n## Practical applications\n\nThis workflow opens up all sorts of analytical possibilities. Medical\ncenters can understand patient accessibility throughout the day.\nEmployers can evaluate office locations based on commute times.\nEmergency services can plan response coverage accounting for traffic\npatterns.\n\nThe real power here is in the simplicity - we've built a sophisticated\ntraffic-aware accessibility visualization in a few dozen lines of R\ncode. Both mapboxapi and mapgl handle the complex parts (API calls,\naddress geocoding, interactive mapping with the comparison slider\nplugin) so you can focus on analysis and communicating results.\n\nThe visualization is great for presenting to stakeholders - and you can\nuse the isochrone objects downstream for additional analysis. [I've got\nan example of how to do this in my\nbook](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#computing-demographic-estimates-for-zones-with-areal-interpolation).\n\nIf you're interested in implementing time-aware accessibility analysis\nfor your organization, or want a custom workshop on these tools for your\nteam, reach out to [kyle\\@walker-data.com](mailto:kyle@walker-data.com).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}