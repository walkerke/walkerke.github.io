{
  "hash": "58281112c60897bd9593a5df766b452a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Drag-and-drop address geocoding with Mapbox in Shiny\"\nauthor: \"Kyle Walker\"\ndate: \"2024-06-04\"\ncategories: [r, gis, data science, spatial analysis]\nembed-resources: false\nimage: image.png\nfilters: \n  - lightbox\nlightbox: auto\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\nLast month, I led the workshops [\"Location Intelligence with R and Mapbox\" and \"Building Web Mapping Applications with R and Shiny\"](https://walkerdata.gumroad.com/l/li-shiny-bundle?offer_code=GEOCODE).  In each workshop, I debuted brand-new features in [the mapboxapi R package](https://walker-data.com/mapboxapi/) to interact with [Mapbox's updated geocoding services](https://docs.mapbox.com/api/search/geocoding/).  These features included batch geocoding and an interactive geocoder widget for Shiny apps.  \n\nIn the concluding Q&A session of the Shiny workshop, a participant asked if it was possible to build functionality into a Shiny app where a user could upload a CSV of addresses then view the geocoded addresses on a map.  This question was too lengthy to answer in the live session, but is very well-suited to a follow-up blog post!\n\nWatch the video to take a look at the live app in action (you may want to view on YouTube for best quality), then read on to learn how you can build it yourselves.  The app uses a cleaned dataset of polling places in Tarrant County, Texas [scraped from here](https://www.tarrantcountytx.gov/content/dam/main/elections/2024/en24/locations/EN24_Vote_Center_Locations.pdf) with Tabula; [you can download the dataset from here to try out this workflow yourselves]().\n\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/swWLhgfRUBY?si=rBIRdTlt7S0DytkR&hd=1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## Setting up the UI\n\nThe full UI code is below; expand to view it.  You'll need a [Mapbox access token](https://walker-data.com/mapboxapi/reference/mb_access_token.html) to use the Mapbox geocoder.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"View UI code\"}\nlibrary(shiny)\nlibrary(readr)\nlibrary(leaflet)\nlibrary(bslib)\nlibrary(mapboxapi)\n\n# Restart R after running this line\n# mb_access_token(\"YOUR TOKEN GOES HERE\", install = TRUE)\n\nui <- page_sidebar(\n  title = \"Upload then Geocode with Mapbox\",\n  sidebar = sidebar(\n    width = 350,\n    fileInput(\n      \"file\", \"Choose CSV File\",\n      accept = \".csv\",\n      buttonLabel = \"Upload...\"\n    ), \n    conditionalPanel(\n      condition = \"output.fileUploaded\",\n      selectInput(\"id_column\", \"Location ID:\", choices = NULL),\n      selectInput(\"address\", \"Address:\", choices = NULL),\n      selectInput(\"city\", \"City:\", choices = NULL),\n      selectInput(\"state\", \"State:\", choices = NULL),\n      selectInput(\"zip\", \"Zip:\", choices = NULL),\n      actionButton(\"geocode\", \"Geocode addresses\")\n    )\n  ), \n  card(\n    full_screen = TRUE,\n    leafletOutput(\"map\")\n  )\n)\n```\n:::\n\n\n\nSome highlights from the UI code: \n\n- I'm using the bslib package to set up the UI, which has become my framework of choice for building Shiny apps.  `page_sidebar()` gets you a collapsible sidebar by default, and putting an output inside `card()` with `full_screen = TRUE` allows you to pop out the map to full screen.  \n\n- `fileInput()` handles the user's file uploads.  As you'll see in the video, users can drag-and-drop a CSV file to upload it or click the input button to browse their filesystem.  \n\n- The `conditionalPanel()` is set up to appear only once a file is uploaded.  It reveals a number of dropdown menus that will be populated with the column names of the input file (handled in the server code), and an action button to geocode the addresses.  You'll want to customize this depending on the expected input format of your CSV file and potentially include some error handling.  \n\n## Setting up the server\n\nThe server code is below: expand to view it.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"View server code\"}\nserver <- function(input, output, session) {\n  \n  output$map <- renderLeaflet({\n    leaflet() %>%\n      addMapboxTiles(\"streets-v12\", \"mapbox\") %>%\n      setView(lng = -97.362, \n              lat = 32.755,\n              zoom = 11)\n  })\n  \n  df_to_geocode <- reactive({\n    req(input$file)\n    read_csv(input$file$datapath)\n  })\n  \n  observe({\n    df <- df_to_geocode()\n    updateSelectInput(session, \"id_column\", choices = names(df))\n    updateSelectInput(session, \"address\", choices = names(df))\n    updateSelectInput(session, \"city\", choices = names(df))\n    updateSelectInput(session, \"state\", choices = names(df))\n    updateSelectInput(session, \"zip\", choices = names(df))\n  })\n  \n  output$fileUploaded <- reactive({\n    !is.null(input$file)\n  })\n  \n  outputOptions(output, \"fileUploaded\", suspendWhenHidden = FALSE)\n  \n  observe({\n    \n    df <- df_to_geocode()\n    \n    shiny::withProgress({\n      \n      incProgress(0.3)\n      \n      df_geocoded <- mb_batch_geocode(\n        data = df,\n        address_line1 = input$address,\n        place = input$city,\n        region = input$state,\n        postcode = input$zip\n      )\n      \n      incProgress(0.9)\n      \n      leafletProxy(\"map\") %>%\n        clearMarkers() %>%\n        addMarkers(data = df_geocoded, \n                   label = df_geocoded[[input$id_column]])\n      \n    }, message = \"Geocoding addresses...\")\n      \n  }) %>%\n    bindEvent(input$geocode, ignoreNULL = TRUE)\n\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n\nSome highlights from the server code: \n\n- The reactive object `df_to_geocode()` represents the uploaded file.  Once the file is uploaded, the drop-down menus are populated (using `updateSelectInput()`) with the column names of the uploaded file.\n\n- This code is critical to get the app to work correctly: \n\n```r\noutput$fileUploaded <- reactive({\n  !is.null(input$file)\n})\n\noutputOptions(output, \"fileUploaded\", suspendWhenHidden = FALSE)\n```\n\n  The reactive `fileUploaded` output returns `TRUE` or `FALSE` depending on whether or not a file has been uploaded, and is used to trigger the conditional panel.  Setting `suspendWhenHidden = FALSE` in `outputOptions()` ensures that `fileUploaded` will update even when the UI element is hidden.  \n  \n- The app then observes the `input$geocode` button click event and uses `mb_batch_geocode()` to geocode the input addresses in bulk based on the user's column selections.  Note the use of `bindEvent()` instead of `observeEvent()`; this syntax was new to me, but is now recommended by Shiny's developers for event handling.\n\n## How to learn more\n\nIf you are interested in learning more, be sure to check out the [Location Intelligence and Shiny Web Apps Workshop Bundle](https://walkerdata.gumroad.com/l/li-shiny-bundle?offer_code=GEOCODE), where you'll get 5 hours of step-by-step instruction from me along with two annotated tutorials to help you build skills in geospatial analytics and Shiny.  As a bonus - readers of this blog post get 25% off the purchase price with the code __GEOCODE__!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}