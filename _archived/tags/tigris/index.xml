<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KYLE WALKER DATA</title>
    <link>/tags/tigris/index.xml</link>
    <description>Recent content on KYLE WALKER DATA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kwalkerdata@gmail.com (Kyle Walker)</managingEditor>
    <webMaster>kwalkerdata@gmail.com (Kyle Walker)</webMaster>
    <copyright>(c) 2017 Kyle Walker</copyright>
    <atom:link href="/tags/tigris/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compare US metropolitan area characteristics in R with tidycensus and tigris</title>
      <link>/2017/06/comparing-metros/</link>
      <pubDate>Sun, 25 Jun 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/06/comparing-metros/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;ul&gt;
&lt;li&gt;Interested in more tips on working with Census data? &lt;a href=&#34;http://eepurl.com/cPGKZD&#34;&gt;Click here to join my email list!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Want to implement this in your organization? Contact me at &lt;a href=&#34;mailto:kwalkerdata@gmail.com&#34;&gt;kwalkerdata@gmail.com&lt;/a&gt; to discuss a training or consulting partnership.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I’ve discussed &lt;a href=&#34;https://walkerke.github.io/2017/05/tigris-metros/&#34;&gt;in a previous post&lt;/a&gt;, practitioners commonly analyze demographic or economic topics at the scale of the metropolitan area. Since I wrote that post, I’ve released the &lt;a href=&#34;https://walkerke.github.io/tidycensus&#34;&gt;tidycensus&lt;/a&gt; package, giving R users access to linked Census geometry and attributes in a single function call. This makes metropolitan area analysis even faster, with help from the &lt;strong&gt;tigris&lt;/strong&gt; and &lt;strong&gt;sf&lt;/strong&gt; packages.&lt;/p&gt;
&lt;p&gt;First, we load up some packages and set some options.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
options(tigris_class = &amp;quot;sf&amp;quot;)
options(tigris_use_cache = TRUE)
# census_api_key(&amp;quot;YOUR KEY HERE&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you are an analyst who wants to compare the distribution of median gross rent by Census tract for three West Coast metropolitan areas: Seattle, Portland, and San Francisco-Oakland. We’ll get data from the 2011-2015 American Community Survey’s Data Profile, using variable &lt;code&gt;DP04_0134&lt;/code&gt;. As this requires data for multiple states, we’ll use a new feature in tidycensus that allows us to supply a vector of states to the &lt;code&gt;state&lt;/code&gt; parameter in &lt;code&gt;get_acs()&lt;/code&gt; for Census tracts, improving on the approach I outlined &lt;a href=&#34;http://walkerke.github.io/2017/05/tidycensus-every-tract/&#34;&gt;in my previous post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rent &amp;lt;- get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;DP04_0134&amp;quot;, 
                state = c(&amp;quot;WA&amp;quot;, &amp;quot;OR&amp;quot;, &amp;quot;CA&amp;quot;), geometry = TRUE)

head(rent)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 5 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -124.7625 ymin: 45.99541 xmax: -116.916 ymax: 48.35451
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
##         GEOID                                         NAME  variable
## 1 53003960100 Census Tract 9601, Asotin County, Washington DP04_0134
## 2 53005011100  Census Tract 111, Benton County, Washington DP04_0134
## 3 53007960500 Census Tract 9605, Chelan County, Washington DP04_0134
## 4 53007961000 Census Tract 9610, Chelan County, Washington DP04_0134
## 5 53009000200   Census Tract 2, Clallam County, Washington DP04_0134
## 6 53009000600   Census Tract 6, Clallam County, Washington DP04_0134
##   estimate moe                       geometry
## 1      812  71 MULTIPOLYGON(((-117.4801304...
## 2      856  71 MULTIPOLYGON(((-119.16317 4...
## 3      623 209 MULTIPOLYGON(((-120.952691 ...
## 4      742 102 MULTIPOLYGON(((-120.329494 ...
## 5      680 174 MULTIPOLYGON(((-124.108725 ...
## 6      824 217 MULTIPOLYGON(((-124.294457 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have median gross rent information for all Census tracts in Washington, Oregon, and California. Subsetting this to our desired metropolitan areas only takes a couple steps. First, we use the tigris package to obtain metropolitan area boundaries with the &lt;code&gt;core_based_statistical_areas()&lt;/code&gt; function, taking care to set &lt;code&gt;cb = TRUE&lt;/code&gt; as this is the default geometry used by tidycensus, and subset by ID for our desired metros. Next, we use an inner spatial join with sf’s &lt;code&gt;st_join()&lt;/code&gt; function to subset for the specific tracts we need.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metros &amp;lt;- core_based_statistical_areas(cb = TRUE) %&amp;gt;%
  filter(GEOID %in% c(&amp;quot;38900&amp;quot;, &amp;quot;41860&amp;quot;, &amp;quot;42660&amp;quot;)) %&amp;gt;%
  select(metro_name = NAME)

wc_rent &amp;lt;- st_join(rent, metros, join = st_within, 
                   left = FALSE) 

head(wc_rent)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 6 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -122.693 ymin: 45.62099 xmax: -122.2963 ymax: 47.73405
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
##          GEOID                                          NAME  variable
## 8  53011040706 Census Tract 407.06, Clark County, Washington DP04_0134
## 9  53011040910 Census Tract 409.10, Clark County, Washington DP04_0134
## 10 53011041206 Census Tract 412.06, Clark County, Washington DP04_0134
## 11 53011041700    Census Tract 417, Clark County, Washington DP04_0134
## 20 53033000200       Census Tract 2, King County, Washington DP04_0134
## 21 53033002800      Census Tract 28, King County, Washington DP04_0134
##    estimate moe                          metro_name
## 8       877  48 Portland-Vancouver-Hillsboro, OR-WA
## 9      1490 206 Portland-Vancouver-Hillsboro, OR-WA
## 10     1100 123 Portland-Vancouver-Hillsboro, OR-WA
## 11      832  32 Portland-Vancouver-Hillsboro, OR-WA
## 20     1128  63         Seattle-Tacoma-Bellevue, WA
## 21     1296 261         Seattle-Tacoma-Bellevue, WA
##                          geometry
## 8  MULTIPOLYGON(((-122.552545 ...
## 9  MULTIPOLYGON(((-122.693002 ...
## 10 MULTIPOLYGON(((-122.58041 4...
## 11 MULTIPOLYGON(((-122.651537 ...
## 20 MULTIPOLYGON(((-122.323566 ...
## 21 MULTIPOLYGON(((-122.355305 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tracts are identified by metropolitan area, with a new column, &lt;code&gt;metro_name&lt;/code&gt;, that includes the metropolitan area name.&lt;/p&gt;
&lt;p&gt;Exploratory analysis by metropolitan area is now straightforward. We can look at faceted histograms of median gross rent by Census tract by metro area with &lt;strong&gt;ggplot2&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(wc_rent, aes(x = estimate)) + 
  geom_histogram() + 
  facet_wrap(~metro_name)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/comparing-metros_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we have feature geometry as well, we can make faceted maps with &lt;code&gt;geom_sf()&lt;/code&gt;, found in the development version of ggplot2. Be sure to set &lt;code&gt;scales = &amp;quot;free&amp;quot;&lt;/code&gt; and &lt;code&gt;theme(aspect.ratio = 1)&lt;/code&gt; if you want this to work correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(viridis)

ggplot(wc_rent, aes(fill = estimate, color = estimate)) + 
  geom_sf() + 
  coord_sf(crs = 26910) + 
  facet_wrap(~metro_name, scales = &amp;quot;free&amp;quot;, nrow = 1) + 
  theme_minimal() + 
  theme(aspect.ratio = 1) + 
  scale_fill_viridis() + 
  scale_color_viridis()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/comparing-metros_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Generating metropolitan subsets of Census data with R and tigris</title>
      <link>/2017/05/tigris-metros/</link>
      <pubDate>Thu, 18 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/05/tigris-metros/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;strong&gt;Need help working with Census data in your project? Contact me at &lt;a href=&#34;mailto:kwalkerdata@gmail.com&#34;&gt;kwalkerdata@gmail.com&lt;/a&gt; to discuss consulting support or a training workshop!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Commonly, studies that use US Census data focus on topics at the scale of the metropolitan area. However, subsetting Census geographic data by metropolitan area is not always straightforward. Such a workflow for Census tracts might look something like:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Manually downloading Census tract shapefiles (often available by state);&lt;/li&gt;
&lt;li&gt;Looking up the counties in a given metropolitan area, along with their FIPS codes;&lt;/li&gt;
&lt;li&gt;Subsetting the data by those FIPS codes.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Repeating the process for each state included in the metropolitan area and then merging the result (if tracts are obtained by state).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This task - which can be tedious - is well-suited for R and the &lt;strong&gt;tigris&lt;/strong&gt; package. R, by way of the &lt;strong&gt;sf&lt;/strong&gt; package, has powerful functionality for spatial subsetting. Further, with a little custom code, we can set up a framework for rapidly retrieving Census tracts for any metropolitan area we want. To get started, let’s load the required packages and set options to cache data from &lt;strong&gt;tigris&lt;/strong&gt; and load the data as &lt;strong&gt;sf&lt;/strong&gt; objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tigris)
library(sf)
library(tidyverse)
options(tigris_class = &amp;quot;sf&amp;quot;)
options(tigris_use_cache = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say we want to obtain Census tracts for the Portland, Oregon metropolitan area, which includes areas in both Oregon and Washington. We can fetch Census tracts for Oregon and Washington and combine them with the &lt;code&gt;rbind_tigris&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;orwa &amp;lt;- rbind_tigris(
  tracts(&amp;quot;OR&amp;quot;, cb = TRUE), 
  tracts(&amp;quot;WA&amp;quot;, cb = TRUE)
)

ggplot(orwa) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f1.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can then subset these tracts spatially by locating the boundary of the Portland metropolitan area available in the &lt;code&gt;core_based_statistical_areas&lt;/code&gt; function. Use the &lt;code&gt;View&lt;/code&gt; function in RStudio and browse the dataset if you are unsure of how to format the string used to filter the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cb &amp;lt;- core_based_statistical_areas(cb = TRUE)

pdx &amp;lt;- filter(cb, grepl(&amp;quot;Portland-Vancouver&amp;quot;, NAME))

ggplot(pdx) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f2.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;The simplest way to do spatial subsetting in &lt;strong&gt;sf&lt;/strong&gt; is by indexing the data you’d like to subset by the spatial overlay. This will return all tracts that intersect the metropolitan area.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- orwa[pdx,]

ggplot() + 
  geom_sf(data = p1) + 
  geom_sf(data = pdx, fill = NA, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f3.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;We notice a problem here - we’ve returned all tracts within the metropolitan area, but also those outside it that touch the metropolitan area’s boundary. Fortunately, &lt;strong&gt;sf&lt;/strong&gt; includes a suite of methods for spatial overlay. We’ll use the &lt;code&gt;st_within&lt;/code&gt; method to identify those tracts &lt;em&gt;within&lt;/em&gt; the boundary of the metropolitan area. Further, as the Census Bureau designs its shapefiles to align cleanly, we shouldn’t have any spatial overlay problems here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;w1 &amp;lt;- st_within(orwa, pdx)

print(length(w1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2282&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(w1[1:5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## integer(0)
## 
## [[2]]
## integer(0)
## 
## [[3]]
## integer(0)
## 
## [[4]]
## integer(0)
## 
## [[5]]
## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that the object &lt;code&gt;w1&lt;/code&gt; is a list with the same length as our &lt;code&gt;orwa&lt;/code&gt; data frame. Values either are length-0 integers - representing tracts that are not within the metro area - or &lt;code&gt;1&lt;/code&gt;, representing tracts that are. In turn, we can use &lt;strong&gt;purrr&lt;/strong&gt; to convert this to a logical vector and subset our data accordingly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;w2 &amp;lt;- map_lgl(w1, function(x) {
  if (length(x) == 1) {
    return(TRUE)
  } else {
    return(FALSE)
  }
})

p2 &amp;lt;- orwa[w2,]

ggplot() + 
  geom_sf(data = p2) + 
  geom_sf(data = pdx, fill = NA, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f4.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! Now, let’s say you want to make this extensible to other metropolitan areas on-demand. We’ll need a function that does the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Takes a metropolitan area as input, and detects the states in which the metro area is located;&lt;/li&gt;
&lt;li&gt;Retrieves tracts for those states;&lt;/li&gt;
&lt;li&gt;Identifies the tracts located within the metro area’s boundary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how to do it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metro_tracts &amp;lt;- function(metro_name) {
  
  # First, identify which states intersect the metro area using the
  # `states` function in tigris
  st &amp;lt;- states(cb = TRUE)
  cb &amp;lt;- core_based_statistical_areas(cb = TRUE)
  metro &amp;lt;- filter(cb, grepl(metro_name, NAME))
  
  stcodes &amp;lt;- st[metro,]$STATEFP
  
  # Then, fetch the tracts, using rbind_tigris if there is more
  # than one state
  if (length(stcodes) &amp;gt; 1) {
    tr &amp;lt;- rbind_tigris(
      map(stcodes, function(x) {
        tracts(x, cb = TRUE)
      })
    )
  } else {
    tr &amp;lt;- tracts(x, cb = TRUE)
  }
  
  # Now, find out which tracts are within the metro area
  within &amp;lt;- st_within(tr, metro)
  
  within_lgl &amp;lt;- map_lgl(within, function(x) {
    if (length(x) == 1) {
      return(TRUE)
    } else {
      return(FALSE)
    }
  })
  
  # Finally, subset and return the output
  output &amp;lt;- tr[within_lgl,]
  
  return(output)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try it out! Here’s Chicago:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chi &amp;lt;- metro_tracts(&amp;quot;Chicago&amp;quot;)

ggplot(chi) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f5.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;And here’s Boston:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bos &amp;lt;- metro_tracts(&amp;quot;Boston&amp;quot;)

ggplot(bos) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f6.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>New in the tigris package: simple features support and historic shapefiles</title>
      <link>/2017/05/tigris-v05/</link>
      <pubDate>Tue, 02 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/05/tigris-v05/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;I am excited to announce that &lt;a href=&#34;https://github.com/walkerke/tigris&#34;&gt;&lt;strong&gt;tigris&lt;/strong&gt;&lt;/a&gt; 0.5 is now on CRAN. This is a major release that has been in the works for several months. Get it with &lt;code&gt;install.packages(&amp;quot;tigris&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One major new feature is support for the simple features data model via the &lt;a href=&#34;https://github.com/edzer/sfr&#34;&gt;sf R package&lt;/a&gt;. &lt;strong&gt;sf&lt;/strong&gt; allows for the representation of spatial objects in R like data frames, but with a list-column containing feature geometry. This has multiple advantages, as objects of class &lt;code&gt;sf&lt;/code&gt; accept &lt;strong&gt;tidyverse&lt;/strong&gt; functions for data wrangling and are much faster to work with. For &lt;strong&gt;tigris&lt;/strong&gt;, this means that large objects like Census blocks or national railroads are much more usable in R.&lt;/p&gt;
&lt;p&gt;To return an object of class &lt;code&gt;sf&lt;/code&gt; via &lt;strong&gt;tigris&lt;/strong&gt;, either supply the argument &lt;code&gt;class = &amp;quot;sf&amp;quot;&lt;/code&gt; or set this globally in your R session with &lt;code&gt;options(tigris_class = &amp;quot;sf&amp;quot;)&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tigris)

options(tigris_class = &amp;quot;sf&amp;quot;)

co &amp;lt;- counties(cb = TRUE)

head(co)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 9 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -88.47323 ymin: 31.18113 xmax: -85.04931 ymax: 33.00682
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
##   STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID    NAME LSAD      ALAND
## 1      01      005 00161528 0500000US01005 01005 Barbour   06 2291820706
## 2      01      023 00161537 0500000US01023 01023 Choctaw   06 2365954971
## 3      01      035 00161543 0500000US01035 01035 Conecuh   06 2201896058
## 4      01      051 00161551 0500000US01051 01051  Elmore   06 1601876535
## 5      01      065 00161558 0500000US01065 01065    Hale   06 1667804583
## 6      01      109 00161581 0500000US01109 01109    Pike   06 1740741211
##     AWATER                       geometry
## 1 50864677 MULTIPOLYGON(((-85.748032 3...
## 2 19059247 MULTIPOLYGON(((-88.473227 3...
## 3  6643480 MULTIPOLYGON(((-87.427204 3...
## 4 99850740 MULTIPOLYGON(((-86.413335 3...
## 5 32525874 MULTIPOLYGON(((-87.870464 3...
## 6  2336975 MULTIPOLYGON(((-86.199408 3...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geo_join&lt;/code&gt; and &lt;code&gt;rbind_tigris&lt;/code&gt; still work with objects of class &lt;code&gt;sf&lt;/code&gt;; however, you can use the &lt;code&gt;*_join&lt;/code&gt; functions from the tidyverse as well.&lt;/p&gt;
&lt;p&gt;The second major new feature is support for historic shapefiles going back to 1990. Historical data are available for the &lt;code&gt;states&lt;/code&gt;, &lt;code&gt;counties&lt;/code&gt;, &lt;code&gt;tracts&lt;/code&gt;, and &lt;code&gt;block_groups&lt;/code&gt; functions, and I’ve re-factored much of &lt;strong&gt;tigris&lt;/strong&gt;’s code to easily accommodate other geographies if requested by users.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)

options(tigris_class = &amp;quot;sp&amp;quot;)

par(mfrow = c(1, 3))

walk(c(1990, 2000, 2010), function(year) {
  plot(tracts(&amp;quot;TX&amp;quot;, &amp;quot;Denton&amp;quot;, cb = TRUE, year = year), 
       main = paste0(&amp;quot;Census tracts in Denton County, &amp;quot;, 
                     as.character(year)))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/tigris-v05_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;My motivation for these updates is twofold. First, I’m working on a new package called &lt;strong&gt;tidycensus&lt;/strong&gt; that will integrate &lt;strong&gt;tigris&lt;/strong&gt; with the decennial Census and American Community Survey APIs. This package will allow R users to return integrated spatial and demographic datasets as &lt;code&gt;sf&lt;/code&gt; objects in one function call, and will be designed to work seamlessly within the tidyverse. Second, I’m starting a book project this summer called &lt;em&gt;Analyzing the US Census with R&lt;/em&gt;. The book will cover Census data acquisition and wrangling; spatial modeling with Census data; and working with Census microdata from the &lt;a href=&#34;https://www.ipums.org/&#34;&gt;Integrated Public Use Microdata Series&lt;/a&gt;, all within R. Look for updates on both projects in this space!&lt;/p&gt;
&lt;p&gt;If you are interested in supporting the development of these projects, I encourage you to hire me for a workshop on these topics or to consult on your next project. Check out &lt;a href=&#34;https://walkerke.github.io/services/&#34;&gt;the Services page&lt;/a&gt; for information on how we can get started.&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>