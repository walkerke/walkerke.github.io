<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KYLE WALKER DATA</title>
    <link>/tags/presentations/index.xml</link>
    <description>Recent content on KYLE WALKER DATA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kwalkerdata@gmail.com (Kyle Walker)</managingEditor>
    <webMaster>kwalkerdata@gmail.com (Kyle Walker)</webMaster>
    <copyright>(c) 2017 Kyle Walker</copyright>
    <atom:link href="/tags/presentations/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dropdown menus in R Markdown with bsselectR</title>
      <link>/2016/12/rmd-dropdowns/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2016/12/rmd-dropdowns/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;I strongly believe that interactive reports, presentations, and scholarly articles are going to become much more prominent in the years ahead. Whereas a PDF article or presentation can often only show a limited aspect of a research project, interactive documents can allow a reader or presenter to explore project content in a much broader sense.&lt;/p&gt;
&lt;p&gt;For dynamic research documents, an excellent option is to combine Shiny with R Markdown to generate a report that can execute R code from a Shiny server. However, not all interactive documents need the full power of Shiny. For example, I’m currently writing a report in which I’d like readers to be able to use drop-down menus to select charts to view. As I produced the charts in Python and saved them all to a folder, I don’t need Shiny to dynamically create the charts in the report.&lt;/p&gt;
&lt;p&gt;To create the drop-down menu, I came across the &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; jQuery plugin. bootstrap-select adds Bootstrap’s dropdown.js and Bootstrap styling to re-style HTML &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; menus, which makes it a nice fit for R Markdown documents that default to this styling. While writing out the raw HTML and JavaScript to accomplish this worked in R Markdown, I found this tedious, so I decided to author &lt;strong&gt;bsselectR&lt;/strong&gt;, an htmlwidget to do this automatically with R code. Many, many thanks are due to the developers of bootstrap-select for their hard work and excellent documentation.&lt;/p&gt;
&lt;p&gt;bsselectR is not on CRAN, but you can install the development version from GitHub with &lt;code&gt;devtools::install_github(&amp;quot;walkerke/bsselectR&amp;quot;)&lt;/code&gt;. View the source code at &lt;a href=&#34;https://github.com/walkerke/bsselectR&#34; class=&#34;uri&#34;&gt;https://github.com/walkerke/bsselectR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the moment, there is one main function in bsselectR, &lt;code&gt;bsselect&lt;/code&gt;, which will generate a bootstrap-select dropdown menu that allows you to interactively display text, images, or HTML documents as iframes. Pass a named vector of text or paths to images/HTML documents and specify the type as &lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;img&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;iframe&amp;quot;&lt;/code&gt;, and &lt;code&gt;bsselect&lt;/code&gt; will return a drop-down menu. On a basic level, &lt;code&gt;bsselect&lt;/code&gt; can work outside of R Markdown, using the default Bootstrap styling. Let’s try a simple example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(bsselectR)

quotes &amp;lt;- c(&amp;quot;Look deep into nature, and then you will understand everything better.&amp;quot;, 
            &amp;quot;A fool thinks himself to be wise, but a wise man knows himself to be a fool.&amp;quot;, 
            &amp;quot;My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.&amp;quot;)

names(quotes) &amp;lt;- c(&amp;quot;Einstein&amp;quot;, &amp;quot;Shakespeare&amp;quot;, &amp;quot;Angelou&amp;quot;)

bsselect(quotes, type = &amp;quot;text&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;https://walkerke.github.io/extras/quotes.html&#34; height=&#34;150&#34; width=&#34;750&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Use the menu to flip through the three quotes.&lt;/p&gt;
&lt;p&gt;A more practical example, however, would be the use of &lt;code&gt;bsselect&lt;/code&gt; in an R Markdown document where the user could flip through a number of plots that are stored in a subdirectory. Let’s take a recent, applied example: scatterplots of the relationship between the percentage vote for Donald Trump and the percentage of county residents with at least a bachelor’s degree by state.&lt;/p&gt;
&lt;p&gt;We’ll get the election data from &lt;a href=&#34;https://github.com/mkearney/presidential_election_county_results_2016&#34;&gt;Mike Kearney’s open presidential election dataset&lt;/a&gt; (updated December 9, so there may be some undercounts) and education data from the ACS using my personal &lt;a href=&#34;https://github.com/walkerke/acs14lite&#34;&gt;acs14lite package&lt;/a&gt;. The following code will generate identical plots for each state, and save them in a subdirectory of my working directory named &lt;code&gt;plots&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(scales)
library(acs14lite)

votes16 &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/mkearney/presidential_election_county_results_2016/master/pres.elect16.results.dec9.csv&amp;quot;)

vars_to_get &amp;lt;- c(&amp;quot;B15002_001E&amp;quot;, &amp;quot;B15002_015E&amp;quot;, &amp;quot;B15002_016E&amp;quot;,  &amp;quot;B15002_017E&amp;quot;,  &amp;quot;B15002_018E&amp;quot;,
                 &amp;quot;B15002_032E&amp;quot;,  &amp;quot;B15002_033E&amp;quot;,  &amp;quot;B15002_034E&amp;quot;,  &amp;quot;B15002_035E&amp;quot;, &amp;quot;B01001_001E&amp;quot;)

educ &amp;lt;- acs14(api_key = &amp;quot;Your key goes here&amp;quot;, 
              geography = &amp;quot;county&amp;quot;, variable = vars_to_get)

educ &amp;lt;- educ %&amp;gt;%
  mutate(pctba = (B15002_015E + B15002_016E + B15002_017E + B15002_018E + B15002_032E + 
                    B15002_033E + B15002_034E + B15002_035E)  / B15002_001E, 
         fips = paste0(state, county))

state_match &amp;lt;- data.frame(state_name = state.name, st = state.abb)

df &amp;lt;- votes16 %&amp;gt;%
  mutate(fips = stringr::str_pad(fips, 5, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)) %&amp;gt;%
  filter(cand == &amp;quot;Donald Trump&amp;quot;) %&amp;gt;%
  inner_join(educ, by = &amp;quot;fips&amp;quot;) %&amp;gt;%
  left_join(state_match, by = &amp;quot;st&amp;quot;)

states &amp;lt;- as.character(sort(unique(df$state_name)))
states &amp;lt;- states[!is.na(states)]
states &amp;lt;- states[!states %in% c(&amp;quot;District of Columbia&amp;quot;, &amp;quot;Alaska&amp;quot;)]

plots &amp;lt;- lapply(states, function(x) {
  
  state = filter(df, state_name == x)
  
  p &amp;lt;- ggplot(state, aes(x = pctba, 
              y = pct)) +
    geom_point(aes(size = B01001_001E), alpha = 0.5, color = &amp;quot;blue&amp;quot;) + 
    geom_smooth(method = &amp;quot;lm&amp;quot;) + 
    scale_y_continuous(labels = percent_format()) + 
    scale_x_continuous(labels = percent_format()) + 
    scale_size_continuous(labels = comma_format()) + 
    theme_minimal() + 
    labs(title = x, 
         x = &amp;quot;Percent over age 25 with at least a bachelor&amp;#39;s degree&amp;quot;, 
         y = &amp;quot;Percent voting Trump&amp;quot;, 
         size = &amp;quot;Total population&amp;quot;, 
         caption = &amp;quot;Data sources: Mike Kearney, 2010-2014 ACS&amp;quot;)
  
  p
  
})

paths &amp;lt;- paste0(states, &amp;quot;.png&amp;quot;)

pwalk(list(paths, plots), ggsave, path = &amp;quot;plots&amp;quot;, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the following code in an R Markdown document knit from my working directory will get me interactivity without Shiny! I’ve also set the selected option to “Oregon”, and the parameters &lt;code&gt;live_search&lt;/code&gt; and &lt;code&gt;show_tick&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt;, which allows for interactive searching of the drop-down menu and shows a check mark next to the selected option. The bootstrap-select dropdown adopts the theme of the R Markdown document, which in this case is &lt;code&gt;spacelab&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
library(bsselectR)

state_plots &amp;lt;- paste0(list.files(&amp;quot;plots&amp;quot;, full.names = TRUE))
names(state_plots) &amp;lt;- str_replace_all(state_plots, 
                                      c(&amp;quot;\\.png&amp;quot; = &amp;quot;&amp;quot;, 
                                        &amp;quot;plots/&amp;quot; = &amp;quot;&amp;quot;))

bsselect(state_plots, type = &amp;quot;img&amp;quot;, selected = &amp;quot;Oregon&amp;quot;, 
         live_search = TRUE, show_tick = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;https://walkerke.github.io/extras/trump_by_education.html&#34; width=&#34;100%&#34; height=&#34;825&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Publish your directory to your hosting service of choice, and you’ll have an interactive report to share like the one above.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bsselect&lt;/code&gt; also works in other R Markdown documents, such as presentations! The example below shows a bsselectR dropdown in a &lt;a href=&#34;https://github.com/yihui/xaringan&#34;&gt;xaringan&lt;/a&gt; &lt;a href=&#34;https://remarkjs.com/#1&#34;&gt;remark.js&lt;/a&gt; presentation. To avoid CSS/JS conflicts, I’ve wrapped the call to &lt;code&gt;bsselect&lt;/code&gt; in bsselectR’s &lt;code&gt;as_iframe&lt;/code&gt; function, which will save out the widget and embed it as an iframe.&lt;/p&gt;
&lt;iframe src=&#34;https://walkerke.github.io/extras/xaringan.html&#34; width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;I’d welcome feedback and pull requests; I’ll be adding features to the package bit by bit in the time ahead.&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Using Slidify to teach with interactive content</title>
      <link>/2014/12/using-slidify-to-teach-with-interactive-content/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2014/12/using-slidify-to-teach-with-interactive-content/</guid>
      <description>

&lt;p&gt;I frequently come across criticisms of PowerPoint as a presentation tool, which is interesting to me given the ubiquity of its use across industries.  When I worked as a data analyst prior to coming to TCU, I frequently prepared PowerPoints using a company template for my boss&amp;rsquo;s presentations or for talks of my own.  In academia, we have considerable freedom in how we can communicate information; however, PowerPoint is still widely used in the classroom and is everywhere at professional conferences.&lt;/p&gt;

&lt;p&gt;The best-known criticisms of PowerPoint are from &lt;a href=&#34;http://users.ha.uth.gr/tgd/pt0501/09/Tufte.pdf&#34;&gt;Edward Tufte&lt;/a&gt;; other notable examples include &lt;a href=&#34;http://www.slate.com/articles/life/education/2014/03/powerpoint_in_higher_education_is_ruining_teaching.html&#34;&gt;Rebecca Schuman&amp;rsquo;s critique of slideshows in higher education&lt;/a&gt;, and &lt;a href=&#34;http://www.philanthropydaily.com/jeff-bezos-powerpoint-prohibition/&#34;&gt;Jeff Bezos&amp;rsquo; banishing of PowerPoint presentations from Amazon&lt;/a&gt;.  I personally don&amp;rsquo;t believe that slideshows are &lt;em&gt;inherently&lt;/em&gt; bad; however, they can exacerbate bad presentation habits.  For example, slideshows with lots of text can serve as crutches for under-prepared presenters, who end up simply reading large quantities of bulleted text from their slides.  In the classroom, students respond to these types of slides by scrambling to copy down every last word from the slide (even if the slides will be provided to them afterward) instead of listening closely to what the instructor is saying.&lt;/p&gt;

&lt;p&gt;I try to avoid putting too much text (or any at all) on my lecture slides for this reason.  However, I am hesitant to get rid of slideshows entirely, as some have suggested.  My field, geography, is intensely visual; in turn, images and data visualizations are often necessary to contextualize geographical concepts for students.  For example, I can discuss the development of informal settlements in African and Asian megacities - but without photographs, this discussion would remain abstract, as few of my students have ever been to these places in person.  Similarly, it is one thing to tell students that there are disparities in life expectancy between European and African countries; &lt;a href=&#34;http://tcugis.maps.arcgis.com/home/webmap/viewer.html?webmap=c9624225857a4f0089d19ac2bd727896&#34;&gt;however, an interactive map (click the link for an example)&lt;/a&gt; can provide a direct reference for students, and allows us to explore the data in class.&lt;/p&gt;

&lt;p&gt;I find slideshows useful for organizing this visual content.  However, it took me some time to figure out the best way to present interactive web-based visualizations to students.  When I started experimenting with interactive visualization last year, I would include a link in my PowerPoint to where the visualization was located on the web; however, this was less than ideal, as it would often interrupt the flow of our discussion.  This led me to seek out a purely web-based solution for my slides.  I came across &lt;a href=&#34;http://slidify.github.io&#34;&gt;Slidify&lt;/a&gt;, an R package by &lt;a href=&#34;https://twitter.com/ramnath_vaidya&#34;&gt;Ramnath Vaidyanathan&lt;/a&gt;.  With Slidify, I can write all of my slides in &lt;a href=&#34;http://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; with &lt;a href=&#34;http://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt;, and embed interactive content in my slides, like any other graphic.  I now use Slidify to produce all of my lecture slides, and all of my presentation slides when possible.  Some sample content from my class on Japan is below; click within the slideshow, then use the arrow keys to move through the slides.  Please note: this is best viewed on a desktop computer rather than a mobile device.  &lt;a href=&#34;http://walkerke.github.io/teaching-with-datavis/japan-slidify/index.html#slide1&#34;&gt;If you&amp;rsquo;d prefer to view the full-size slideshow, click here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;iframe id=&#34;frame&#34; src=&#34;http://walkerke.github.io/teaching-with-datavis/japan-slidify/index.html#slide1&#34; height=&#34;750&#34; width=&#34;975&#34; frameBorder = &#34;0&#34; scrolling = &#34;no&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;In my opinion, embedding interactive content directly in the slide deck is a significant improvement over linking out to these graphics from a PowerPoint presentation, or having to navigate back and forth between a slideshow and a web browser.  For example, we spend a significant amount of time discussing aging and projected population decline in Japan.  I can show students how Japan&amp;rsquo;s population is projected to decline by over 40 million by the end of the century with the interactive Plotly chart of population change over time, then put this in context with the population pyramid immediately afterward.  I then highlight using the pyramid&amp;rsquo;s interactivity that Japan is projected to be home to 1.3 million people aged 100 and up in 2050, then go right back to the Plotly graph and use its interactivity to show that this would make centenarians over one percent of Japan&amp;rsquo;s population.  I follow with an embedded YouTube video from &lt;a href=&#34;http://www.journeyman.tv/&#34;&gt;Journeyman Pictures&lt;/a&gt; about demographic issues in Japan, and ask students to complete an in-class writeup in which they identify how the issues explored in the video help explain the demographic trends we&amp;rsquo;ve observed in the charts.  Rather than bouncing around from PowerPoint to YouTube to Plotly, I can do all of this in a much smoother way with Slidify.&lt;/p&gt;

&lt;p&gt;Granted, HTML slides are not immune to the poor presentation behaviors that are often associated with PowerPoint; you can fill up these slides with lots of text as well if you so choose.  Additionally, a caveat is that internet access is required to leverage the full interactivity of this slide deck, which can be an issue in a professional setting.  For example, the last conference I attended did not have internet access; another presentation I gave a year ago had to be uploaded to a special presentation management system, and thus required PowerPoint.  However, I have been very pleased with Slidify thus far and will continue to use it in my teaching.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to read onward, I&amp;rsquo;ve included some of the technical details of using interactive content in Slidify presentations below.&lt;/p&gt;

&lt;h3 id=&#34;embedding-interactive-content-in-a-slidify-presentation&#34;&gt;Embedding interactive content in a Slidify presentation&lt;/h3&gt;

&lt;p&gt;Slidify allows users to produce HTML slides from Markdown for several different frameworks.  If you aren&amp;rsquo;t familiar with Markdown, I encourage you to get acquainted with it; it allows you to convert a basic text formatting syntax to HTML, and is really useful.  &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;You can read more about Markdown here.&lt;/a&gt; My favorite frameworks are &lt;a href=&#34;https://github.com/adamzap/landslide&#34;&gt;Landslide&lt;/a&gt; and &lt;a href=&#34;http://lab.hakim.se/reveal-js/#/&#34;&gt;Reveal.JS&lt;/a&gt;.  The above presentation is created with Landslide, and uses some custom CSS I&amp;rsquo;ve specified for the styling.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to go into extensive detail on how to create a Slidify presentation; &lt;a href=&#34;http://zevross.com/blog/2014/11/19/creating-elegant-html-presentations-that-feature-r-code/&#34;&gt;instead, I&amp;rsquo;m going to refer you to Zev Ross&amp;rsquo;s excellent tutorial, which is linked here&lt;/a&gt; and goes over the ins-and-outs of setting up Slidify.  The R Markdown code that generated the slides &lt;a href=&#34;https://github.com/walkerke/teaching-with-datavis/tree/master/japan-slidify&#34;&gt;is also available in its GitHub repository.&lt;/a&gt;  Instead, I&amp;rsquo;d like to discuss how to embed visuals in a Slidify presentation, such as static imagery, interactive visualizations, and video clips.&lt;/p&gt;

&lt;p&gt;While Slidify allows you to avoid writing HTML/CSS/JavaScript for the most part, it is helpful to know a little bit of each to achieve its full functionality.  For me, Slidify has been a great way to learn about how webpages work.  Slide 3, which is a picture of Tokyo, is a picture I&amp;rsquo;ve found from a Google image search.  Standard Markdown syntax allows you to reference images; however, if you want more control over the size of your image, you&amp;rsquo;ll want to turn to regular HTML.  The code for the slide is below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
## Tokyo

&amp;lt;img src=assets/img/tokyo.jpg style=&amp;quot;width: 750px&amp;quot;&amp;gt;

&amp;lt;span class=&amp;quot;footnote&amp;quot;&amp;gt;Source: [maxisciences.com](http://img1.mxstatic.com/wallpapers/313ec7a690d40c8381ddff3cbf781e16_large.jpeg)&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve chosen to save the image in my &lt;code&gt;assets/img&lt;/code&gt; folder that is generated by Slidify; you could also reference it directly from the web.  To cite the image source in Slidify, you also can use HTML; put your text inside of &lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; tags with the class &lt;code&gt;footnote&lt;/code&gt;.  However, I can use Markdown syntax within the HTML tags to reference a hyperlink, as I&amp;rsquo;ve done above.  In Markdown, links can be specified with brackets and parentheses like this: &lt;code&gt;[Name of link here](website of link)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The slides that follow include embedded interactive content.  Slide 4 shows a &lt;a href=&#34;http://en.wikipedia.org/wiki/Treemapping&#34;&gt;tree map&lt;/a&gt; of Japan&amp;rsquo;s exports by type from the excellent &lt;a href=&#34;http://atlas.media.mit.edu/&#34;&gt;Observatory of Economic Complexity&lt;/a&gt;.  Slides 5 and 6 contain embedded charts that I&amp;rsquo;ve created; one is a &lt;a href=&#34;http://plot.ly&#34;&gt;Plotly&lt;/a&gt; chart that shows past and projected future population change in Japan &lt;a href=&#34;http://walkerke.github.io/2014/05/tourism-plotly/&#34;&gt;(see how to make charts like these here)&lt;/a&gt;, and the other is an interactive population pyramid for Japan&amp;rsquo;s projected population structure in 2050 &lt;a href=&#34;http://walkerke.github.io/2014/06/rcharts-pyramids/&#34;&gt;(read more on how to create these here)&lt;/a&gt;.  In each instance, these interactive graphics are embedded in my slideshow with HTML &lt;code&gt;&amp;lt;iframe&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt; tags.  An example of what this looks like for the Plotly chart is below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
## Demography of Japan

&amp;lt;iframe src=&amp;quot;http://plot.ly/~walkerke/57&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;500&amp;quot; scrolling=&amp;quot;no&amp;quot; frameBorder=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;

&amp;lt;span class=&amp;quot;footnote&amp;quot;&amp;gt;Data source: United Nations&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both Plotly and the Observatory of Economic Complexity provide the HTML code for you to embed their hosted visualizations in your web page.   Other visualizations you&amp;rsquo;ve created yourself, like the population pyramid, will need to be hosted somewhere if they are not produced with a service like Plotly; &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; is an excellent free option.&lt;/p&gt;

&lt;p&gt;The last slide is an embedded clip from YouTube.  I&amp;rsquo;m a big advocate of showing short video clips in class to contextualize course content; embedding those clips within the slideshow allows for a smoother transition between class discussion and the video.  YouTube, and many other online video services, will provide you with the embed codes for the video.&lt;/p&gt;

&lt;p&gt;The full R Markdown that generates the sample slideshow &lt;a href=&#34;https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/japan-slidify/index.Rmd&#34;&gt;is available from this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ramnath Vaidyanathan for authoring the Slidify and rCharts packages;&lt;/li&gt;
&lt;li&gt;Adam Zapletal, the creator of the Landslide presentation framework;&lt;/li&gt;
&lt;li&gt;Alexander Simoes (author of the Observatory of Economic Complexity), the Plotly team, and Journeyman Pictures.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>