{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Exploratory spatial data analysis with Python\"\n",
        "author: \"Kyle Walker\"\n",
        "date: \"2022-12-20\"\n",
        "categories: [python, gis, data science]\n",
        "image: image.png\n",
        "editor: \n",
        "  markdown: \n",
        "    wrap: 72\n",
        "---\n",
        "\n",
        "In early 2023, the print copy of my book [*Analyzing US Census Data:\n",
        "Methods, Maps, and Models in R*](https://walker-data.com/census-r/) will\n",
        "be available for purchase. The response to the free online version of\n",
        "the book has been fantastic thus far. One question I commonly get asked,\n",
        "however, is \"will you re-produce this for Python? I'd love to use this\n",
        "work but I don't use R.\"\n",
        "\n",
        "I don't have plans to replicate all of my R work in Python, but I did\n",
        "get the itch in the second half of 2022 to learn Python package\n",
        "development. The result is\n",
        "[**pygris**](https://walker-data.com/pygris/), which is a port of the [R\n",
        "**tigris** package](https://github.com/walkerke/tigris) but with some\n",
        "additional features.\n",
        "\n",
        "To celebrate the publication of my book as well as the **pygris**\n",
        "package, I'm launching a blog series to illustrate how to reproduce some\n",
        "of my favorite examples from my book in Python. Each example will\n",
        "feature **pygris**. Follow along - I hope you find it useful!\n",
        "\n",
        "## Mapping Local Moran's I (LISA) clusters in Python\n",
        "\n",
        "**Corresponding section in *Analyzing US Census Data*: [Identifying\n",
        "clusters and spatial outliers with local indicators of spatial\n",
        "association\n",
        "(LISA)](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#identifying-clusters-and-spatial-outliers-with-local-indicators-of-spatial-association-lisa)**\n",
        "\n",
        "I came into graduate school intending to be a qualitative researcher,\n",
        "but I really got excited about spatial data analysis (and changed my\n",
        "career trajectory) when I learned\n",
        "[GeoDa](https://geodacenter.github.io/), a GUI tool for exploratory\n",
        "spatial data analysis. The method in GeoDa that resonated with me the\n",
        "most was the local form of the Moran's *I*, an example of a LISA (local\n",
        "indicators of spatial association) statistic.\n",
        "\n",
        "LISAs are exploratory tools that help you make sense of spatial patterns\n",
        "in a dataset. They help surface preliminary answers to these questions:\n",
        "\n",
        "-   Where are there concentrations of *high* attribute values in my\n",
        "    spatial dataset?\n",
        "-   Conversely, where can I find concentrations of *low* attribute\n",
        "    values in my data?\n",
        "-   Finally, are there any *unexpected* values in my dataset, given the\n",
        "    characteristics of their neighbors? These \"spatial outliers\" can be\n",
        "    above-average values surrounded by low values, or below-average\n",
        "    values surrounded by high values.\n",
        "\n",
        "This post will walk you through how to create an interactive LISA map of\n",
        "median age by Census tract from the 2017-2021 American Community Survey,\n",
        "similar to the example in [Section\n",
        "7.7.3](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#identifying-clusters-and-spatial-outliers-with-local-indicators-of-spatial-association-lisa)\n",
        "of my book. That section of my book covers more technical details about\n",
        "LISA if you are interested in reading further.\n",
        "\n",
        "### Getting the data with **pygris**\n",
        "\n",
        "To get started, we'll use **pygris** to get the data required for our\n",
        "analysis. The core functionality in **pygris** is a suite of functions\n",
        "to return [US Census Bureau TIGER/Line\n",
        "shapefiles](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html)\n",
        "as [GeoPandas\n",
        "GeoDataFrames](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.html).\n",
        "\n",
        "Let's import the `tracts()` function to demonstrate how this works for\n",
        "the Minneapolis-St. Paul, Minnesota area. We'll define a list of the\n",
        "seven core Twin Cities counties, and request Census tract boundaries for\n",
        "those counties with `tracts()`. **pygris** functions translate state\n",
        "names/abbreviations and county names internally to FIPS codes, so there\n",
        "is no need to look them up.\n",
        "\n",
        "The argument `year = 2021` gives back the 2021 version of the Census\n",
        "tract boundaries, which will be important as we'll be matching to\n",
        "corresponding 2021 ACS data. Finally, the argument `cache = True` stores\n",
        "the downloaded shapefile in a local cache, which means that I won't need\n",
        "to download it again from the Census website in future projects."
      ],
      "id": "82fcfe51"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pygris import tracts\n",
        "\n",
        "tc_counties = [\"Hennepin\", \"Ramsey\", \"Scott\", \n",
        "               \"Carver\", \"Dakota\", \"Washington\", \"Anoka\"]\n",
        "\n",
        "tc_tracts = tracts(state = \"MN\", county = tc_counties, \n",
        "                   year = 2021, cache = True)\n",
        "\n",
        "tc_tracts.plot()"
      ],
      "id": "6a6b3d80",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We'll next need to grab data on median age and merge to the Census tract\n",
        "shapes. I don't have plans to implement my [R package\n",
        "**tidycensus**](https://walker-data.com/tidycensus/) in Python;\n",
        "**tidycensus** is designed specifically for use within R's\n",
        "[tidyverse](https://www.tidyverse.org/) and Pythonic interfaces to the\n",
        "Census API like\n",
        "[**cenpy**](https://cenpy-devs.github.io/cenpy/index.html) already\n",
        "exist. However, I've always admired Hannah Recht's work on the [R\n",
        "**censusapi** package](https://www.hrecht.com/censusapi/), which can\n",
        "connect to all Census Bureau API endpoints. **pygris** includes a\n",
        "`get_census()` function inspired by **censusapi** that developers can\n",
        "use to build interfaces to the data they need.\n",
        "\n",
        "Let's use `get_census()` to get data on median age at the Census tract\n",
        "level for Minnesota, then merge to our Census tracts for additional\n",
        "analysis."
      ],
      "id": "aa418cf4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pygris import validate_state\n",
        "from pygris.data import get_census\n",
        "\n",
        "mn_median_age = get_census(dataset = \"acs/acs5\",\n",
        "                           variables = \"B01002_001E\",\n",
        "                           year = 2021,\n",
        "                           params = {\n",
        "                             \"for\": \"tract:*\",\n",
        "                             \"in\": f\"state:{validate_state('MN')}\"},\n",
        "                           guess_dtypes = True,\n",
        "                           return_geoid = True\n",
        ")\n",
        "\n",
        "mn_median_age.head()"
      ],
      "id": "d20916a7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "You can understand the arguments to `get_census()` as follows:\n",
        "\n",
        "-   `dataset` is the dataset name on the Census API you are connecting\n",
        "    to. Datasets can be found at https://api.census.gov/data.html in the\n",
        "    \"Dataset Name\" column.\n",
        "-   `variables` is a string (or list of strings) representing the\n",
        "    variable IDs you want for a given dataset. For the 2021 5-year ACS,\n",
        "    those variable IDs are found at\n",
        "    https://api.census.gov/data/2021/acs/acs5/variables.html.\\\n",
        "-   `year` is the year of your data (or end-year for a 5-year ACS\n",
        "    sample); the Census API will refer to this as the \"vintage\" of the\n",
        "    data.\n",
        "-   `params` is a dict of query parameters to send to the API. Each\n",
        "    endpoint will have its own parameters, so you'll need to spend a\n",
        "    little time with the Census API documentation to learn what you can\n",
        "    use. In our case, we are requesting data **for** Census tracts\n",
        "    **in** Minnesota. The built-in `validate_state()` function can be\n",
        "    used here to convert `'MN'` to an appropriate FIPS code.\\\n",
        "-   `guess_dtypes` and `return_geoid` are convenience parameters that\n",
        "    you'll want to use judiciously. `guess_dtypes` tries to guess which\n",
        "    columns to convert to numeric, and `return_geoid` tries to find\n",
        "    columns to concatenate into a `GEOID` column that can be used for\n",
        "    merging to Census shapes. These arguments won't be appropriate for\n",
        "    every API endpoint.\n",
        "\n",
        "With our data in hand, we can do an inner merge and map the result:"
      ],
      "id": "cabab570"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "tc_tract_age = tc_tracts.merge(mn_median_age, how = \"inner\", on = \"GEOID\")\n",
        "\n",
        "tc_tract_age.plot(column = \"B01002_001E\", legend = True)\n",
        "\n",
        "plt.title(\"Median age by Census tract\\nMinneapolis-St. Paul, 2017-2021 ACS\")"
      ],
      "id": "e6efa2ba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analyzing spatial clustering with PySAL\n",
        "\n",
        "The [PySAL](https://pysal.org/) family of Python packages is central to\n",
        "the work of anyone who needs to analyze spatial data in Python. The\n",
        "[**esda** package](https://pysal.org/esda/index.html) makes the\n",
        "calculation of the local Moran's *I* statistic remarkably smooth. We\n",
        "will generate a Queen's case spatial weights object ([see my book for\n",
        "more technical\n",
        "details](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#spatial-neighborhoods-and-spatial-weights-matrices))\n",
        "to represent relationships between Census tracts and their neighbors,\n",
        "then call the `Moran_Local()` function to calculate the LISA statistics."
      ],
      "id": "e74570ba"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from libpysal import weights\n",
        "import esda\n",
        "\n",
        "tc_clean = tc_tract_age.copy().dropna().filter(['GEOID', 'B01002_001E', 'geometry'])\n",
        "\n",
        "w = weights.contiguity.Queen.from_dataframe(tc_clean)\n",
        "\n",
        "m = esda.Moran_Local(tc_clean['B01002_001E'], w, seed = 1983)\n",
        "\n",
        "type(m)"
      ],
      "id": "1ee19725",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We get an object of type `Moran_Local` which stores our analytical\n",
        "result. [The documentation provides a comprehensive overview of the\n",
        "object's\n",
        "attributes](https://pysal.org/esda/generated/esda.Moran_Local.html).\n",
        "We'll grab two here and add them back to our Census tract dataset as new\n",
        "columns: `q`, which is the LISA quadrant (denoting the cluster type);\n",
        "and `p_sim`, which gives us a pseudo-p-value based on conditional\n",
        "permutation ([see here for further discussion of this\n",
        "concept](https://geodacenter.github.io/workbook/6a_local_auto/lab6a.html#significance-and-interpretation)).\n",
        "\n",
        "Using this information, we can identify \"significant\" and\n",
        "\"non-significant\" clusters and generate some more informative labels."
      ],
      "id": "ba24653a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "\n",
        "# We can extract the LISA quadrant along with the p-value from the lisa object\n",
        "tc_clean['quadrant'] = m.q\n",
        "tc_clean['p_sim'] = m.p_sim\n",
        "# Convert all non-significant quadrants to zero\n",
        "tc_clean['quadrant'] = np.where(tc_clean['p_sim'] > 0.05, 0, tc_clean['quadrant'])\n",
        "\n",
        "# Get more informative descriptions\n",
        "tc_clean['quadrant'] = tc_clean['quadrant'].replace(\n",
        "  to_replace = {\n",
        "    0: \"Not significant\",\n",
        "    1: \"High-high\",\n",
        "    2: \"Low-high\",\n",
        "    3: \"Low-low\",\n",
        "    4: \"High-low\"\n",
        "  }\n",
        ")\n",
        "\n",
        "tc_clean.head()"
      ],
      "id": "83199096",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Building an interactive LISA map\n",
        "\n",
        "We now have all the information necessary to map LISA clusters. I'm\n",
        "going to show a workflow that differs slightly from typical LISA maps\n",
        "like the one illustrated in my book. One disadvantage of static LISA\n",
        "maps is that they assume an analyst has familiarity with the region\n",
        "under study. Without this familiarity, it can be difficult to determine\n",
        "exactly which locations are represented by different cluster types.\n",
        "\n",
        "Enter the `.explore()` GeoDataFrame method in GeoPandas. `.explore()` is\n",
        "an interface to [Leaflet.js](https://leafletjs.com/) through\n",
        "[Folium](https://python-visualization.github.io/folium/). Simply calling\n",
        "`.explore()` on a GeoDataFrame gets you started interactively exploring\n",
        "your spatial data; however, the method itself is a fairly full-featured\n",
        "interactive mapping engine.\n",
        "\n",
        "With a little customization, we can build out an informative interactive\n",
        "map showing our LISA analysis of median age by Census tract in the Twin\n",
        "Cities. Here's how we do it:\n",
        "\n",
        "-   We choose `\"quadrant\"` as the column to visualize, and pass a list\n",
        "    of colors to `cmap` to align with the typical color scheme used for\n",
        "    LISA mapping (with some small modifications to improve visibility).\n",
        "-   `legend = True` adds an informative legend, and a muted grey basemap\n",
        "    is selected with `tiles`.\n",
        "-   The various `_kwds` parameters are quite powerful, as this is how\n",
        "    you will do more fine-grained customization of your map. We'll\n",
        "    reduce the line weight of our polygons to 0.5, and importantly do\n",
        "    some customization of the popup to change the column names to\n",
        "    informative aliases. Click on a Census tract to see what you get!"
      ],
      "id": "e012f76a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Build a LISA cluster map \n",
        "tc_clean.explore(column = \"quadrant\", \n",
        "                 cmap = [\"red\", \"hotpink\", \"deepskyblue\", \"blue\", \"lightgrey\"], \n",
        "                 legend = True, \n",
        "                 tiles = \"CartoDB positron\", \n",
        "                 style_kwds = {\"weight\": 0.5}, \n",
        "                 legend_kwds = { \"caption\": \"LISA quadrant\"}, \n",
        "                 tooltip = False, \n",
        "                 popup = True,\n",
        "                 popup_kwds = {\n",
        "                    \"aliases\": [\"GEOID\", \"Median age\", \"LISA quadrant\", \"Pseudo p-value\"]\n",
        "                 })"
      ],
      "id": "e6c58ba5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Our analytical result shows that younger areas tend to be found nearer\n",
        "to the Minneapolis / St. Paul urban cores, and older areas cluster in\n",
        "the western, southern, and northeastern suburbs. Spatial outliers are\n",
        "scattered throughout the region, and the map's interactivity allows us\n",
        "to zoom in and click to understand these outliers in greater detail.\n",
        "\n",
        "Try out this workflow for yourself, and follow along here for more of my\n",
        "favorite examples from *Analyzing US Census Data* translated to Python\n",
        "over the next few months."
      ],
      "id": "54c50a75"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/kylewalker/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}